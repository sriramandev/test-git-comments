name: Release - Dev Tag Retrieval PR Generator
# Order of execution
# 1. First identify the last release and get tag corresponding to it.
# 2. Using the last release tag, identify the next commit ( that will be used to get the start sha for release note tool --- end sha will be the current tag sha).
# 3. Get the current tag sha( this will be the end sha for release note tool)
# 4.
on:
  push:
    branches:
      - "!not_activated_on_branches!*"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "!*-*"

jobs:
  gen_release_notes:
    name: Generate Release Notes
    # Only run this job if we're in the main repo, not a fork.
    # if: github.repository == 'vmwa/re-tanzu/tanzu-framework'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v1

      - name: 'Generate details about repo'
        id: generate-repo-details
        shell: bash
        run: |
          echo "::set-output name=repo-name::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"
          echo "::set-output name=repo-org::$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')"
      - name: 'Get last release'
        uses: octokit/request-action@v2.x
        id: get-last-release
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: ${{ steps.generate-repo-details.outputs.repo-org }}
          repo: ${{ steps.generate-repo-details.outputs.repo-name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Generate details for creating release notes'
        id: get-start-end-sha
        shell: bash
        run: |
          LAST_TAG=${{ fromJson(steps.get-last-release.outputs.data).tag_name }}
          echo "last tag - $LAST_TAG"
          LAST_TAG_SHA=$(git rev-list -n 1 ${{ fromJson(steps.get-last-release.outputs.data).tag_name }})
          echo "Last tag SHA - $LAST_TAG_SHA"
          END_SHA=$(git rev-parse HEAD)
          echo "End Sha - $END_SHA"
          declare -a SHA_ARRAY
          SHA_ARRAY=($(env -i git log --format='%H' --reverse --ancestry-path "$LAST_TAG_SHA"^..."$END_SHA"))
          currentShaFound=false
          currentSha=""
          for i in "${SHA_ARRAY[@]}"
          do
            currentSha=$i
            if $currentShaFound ;
            then
              break
            fi
            if [ "$LAST_TAG_SHA" == "$currentSha" ];
            then
              currentShaFound=true
            fi
          done
          if [ -z "$currentSha" ]
          then
            echo "Did not find any commits after previous tag sha"
            exit 1
          fi
          if ! $currentShaFound
          then
            echo "Failed to find last tag sha"
            exit 1
          fi

          RELEASE_VERSION=${GITHUB_REF#refs/*/}

          echo "::set-output name=start-sha::$currentSha"
          echo "::set-output name=end-sha::$END_SHA"
          echo "::set-output name=release-version::$RELEASE_VERSION"
          echo "::set-output name=prev-release-version::${{ fromJson(steps.get-last-release.outputs.data).tag_name }}"
          echo "::set-output name=repo-name::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"
          echo "::set-output name=repo-org::$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
        id: go

      - name: Install release-note dependency
        run: |
          go get k8s.io/release/cmd/release-notes@latest

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYYMMDDHHmmss'

      - name: Generate release notes
        id: get-release-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release-notes \
              --github-base-url https://github.com \
              --org ${{ steps.generate-repo-details.outputs.repo-org }} \
              --repo ${{ steps.generate-repo-details.outputs.repo-name }} \
              --branch main \
              --required-author "" \
              --start-sha ${{ steps.get-start-end-sha.outputs.start-sha }} \
              --end-sha ${{ steps.get-start-end-sha.outputs.end-sha }} \
              --output /tmp/${{ steps.time.outputs.time }}-bin-notes

      - name: 'Get Github Release notes'
        uses: octokit/request-action@v2.x
        id: get-github-release-notes
        with:
          route: POST /repos/{owner}/{repo}/releases/generate-notes
          owner: ${{ steps.generate-repo-details.outputs.repo-org }}
          repo: ${{ steps.generate-repo-details.outputs.repo-name }}
          tag_name: ${{ steps.get-start-end-sha.outputs.release-version }}
          previous_tag_name: ${{ steps.get-start-end-sha.outputs.prev-release-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Identify New Contributors section'
        id: get-new-contributors
        run: |
          githubOutput="/tmp/${{ steps.time.outputs.time }}-github-output"
          echo "${{ fromJson(steps.get-github-release-notes.outputs.data).body }}" > "$githubOutput"


      - name: 'Generate the release notes'
        shell: bash
        run: |
          NEW_CONTRIBUTORS=$(sed -n '/## New Contributors/,$p' /tmp/${{ steps.time.outputs.time }}-github-output)
          RELEASE_TOOL_NOTES=$(sed 's/### Uncategorized/### Miscellaneous/g' /tmp/${{ steps.time.outputs.time }}-bin-notes)
          RELEASE_NOTES=$(cat <<-END
            ## Tanzu CLI Installation Instructions

            If you are installing Tanzu CLI using the artifacts published as part of this release, please follow the [instructions](https://github.com/vmware-tanzu/tanzu-framework/blob/main/docs/cli/getting-started.md).

            $RELEASE_TOOL_NOTES

            $NEW_CONTRIBUTORS
          END
          )
          echo "$RELEASE_NOTES"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - id: create_draft_release
        name: Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          body: ${{ toJSON(env.RELEASE_NOTES) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}